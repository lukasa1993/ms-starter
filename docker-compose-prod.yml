version: "3.9"
services:
  kong:
    image: kong:latest
    restart: always
    environment:
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
      - KONG_LUA_SSL_TRUSTED_CERTIFICATE=/etc/ssl/certs/ca-certificates.crt
      - KONG_DNS_STALE_TTL=120
      - KONG_DNS_VALID_TTL=30
      - KONG_DNS_ORDER=A,CNAME
      - KONG_DNS_NOT_FOUND_TTL=1
      - KONG_DNS_NO_SYNC=on
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - db.env
    ports:
      - "80:8000"
      - "443:8443"
    working_dir: /tmp/run
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8001/status" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    dns:
      - 1.1.1.1
      - 9.9.9.9
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: any
    networks:
      - sample-ms
    command: kong start

  kong_migrations:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - db.env
    networks:
      - sample-ms
    restart: on-failure
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: on-failure

  kong_migrations_up:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    environment:
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - db.env
    networks:
      - sample-ms
    restart: on-failure
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: on-failure


  db-migrate:
    image: ghcr.io/lukasa1993/sample-db-migrations:latest
    restart: on-failure
    working_dir: /srv
    environment:
      - NODE_ENV=dev
      - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - dev.env
    networks:
      - sample-ms
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: on-failure
    command: sh -c "export POSTGRES_PASSWORD=$$(cat /run/secrets/POSTGRES_PASSWORD_FILE) && npm install -g npm && npm install --no-package-lock --only=production --legacy-peer-deps --no-fund && node node_modules/db-migrate/bin/db-migrate up"

  ms_sample_auth:
    image: ghcr.io/lukasa1993/ms-sample-auth:latest
    restart: always
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - ./node.env
      - ./dev.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    working_dir: /opt/app
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: any
    networks:
      - sample-ms

  ms_sample_file:
    image: ghcr.io/lukasa1993/ms-sample-file:latest
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    secrets:
      - S3_KEY
      - S3_SECRET
    working_dir: /opt/app
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: any
    networks:
      - sample-ms

  ms_sample_web_app:
    image: ghcr.io/lukasa1993/ms-sample-web-app:latest
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    working_dir: /opt/app
    deploy:
      update_config:
        order: start-first
      restart_policy:
        condition: any
    networks:
      - sample-ms

networks:
  sample-ms:

secrets:
  POSTGRES_PASSWORD_FILE:
    file: ./postgress_password
  S3_KEY:
    file: ./s3_key
  S3_SECRET:
    file: ./s3_secret
