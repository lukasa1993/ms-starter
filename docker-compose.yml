version: "3.9"
services:
  kong:
    container_name: kong
    image: kong:latest
    restart: always
    environment:
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - dev-db.env
    ports:
      - "80:8000"
      - "443:8443"
      - "127.0.0.1:8001:8001"
    working_dir: /tmp/run
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8001/status" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
      - sample-ms
    command: kong start

  kong_migrations:
    container_name: kong_bootstrap
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - dev-db.env
    networks:
      - sample-ms
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong_migrations_up:
    container_name: kong_migrations
    image: kong:latest
    command: kong migrations up && kong migrations finish
    environment:
      - KONG_PG_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - dev-db.env
    networks:
      - sample-ms
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  ms_sample_db_migrations:
    container_name: ms_sample_db_migrations
    image: node:lts
    restart: on-failure
    working_dir: /srv
    environment:
      - NODE_ENV=dev
      - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    env_file:
      - dev-db.env
    volumes:
      - /srv/node_modules
      - ../ms-sample-db-migrations:/srv
    networks:
      - sample-ms
    deploy:
      restart_policy:
        condition: on-failure
    command: sh -c "export POSTGRES_PASSWORD=$$(cat /run/secrets/POSTGRES_PASSWORD_FILE) && npm install -g npm && npm install --no-package-lock --only=production --legacy-peer-deps --no-fund && node node_modules/db-migrate/bin/db-migrate up"

  ms_sample_auth:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_auth
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-auth:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms

  ms_sample_file:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_file
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    secrets:
      - S3_KEY
      - S3_SECRET
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-file:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms

  ms_sample_user:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_user
    restart: always
    env_file:
      - ./node.env
      - ./dev-db.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    secrets:
      - POSTGRES_PASSWORD_FILE
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-user:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms

  ms_sample_company:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_company
    restart: always
    env_file:
      - ./node.env
      - ./dev-db.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    secrets:
      - POSTGRES_PASSWORD_FILE
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-company:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms

  ms_sample_web_app:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_web_app
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-web-app:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms


  ms_sample_admin_web_app:
    image: ghcr.io/lukasa1993/ld_node:latest
    container_name: ms_sample_admin_web_app
    restart: always
    env_file:
      - ./node.env
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:7702/health" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    volumes:
      - /opt/app/node_modules
      - ../ms-sample-admin-web-app:/opt/app
    working_dir: /opt/app
    networks:
      - sample-ms


  sample_db:
    container_name: sample_db
    user: postgres
    image: postgres:12-alpine
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      timeout: 20s
      retries: 10
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - ./db/data:/var/lib/postgresql/data
    env_file:
      - dev-db.env
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD_FILE
    secrets:
      - POSTGRES_PASSWORD_FILE
    networks:
      - sample-ms


  sample_s3:
    container_name: sample_s3
    image: minio/minio
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:9000/minio/health/live" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    ports:
      - "9000:9000"
      - "127.0.0.1:40199:40199"
    volumes:
      - ./storage/minio:/data
    networks:
      - sample-ms
    secrets:
      - S3_KEY
      - S3_SECRET
    environment:
      MINIO_ROOT_USER_FILE: S3_KEY
      MINIO_ROOT_PASSWORD_FILE: S3_SECRET
    command: server --address 0.0.0.0:9000 --console-address 0.0.0.0:40199 /data

networks:
  sample-ms:

secrets:
  POSTGRES_PASSWORD_FILE:
    file: ./postgress_password
  S3_KEY:
    file: ./s3_key
  S3_SECRET:
    file: ./s3_secret
